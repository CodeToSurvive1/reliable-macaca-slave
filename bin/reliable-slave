#!/usr/bin/env node
/* ================================================================
 * reliable-slave by xdf(xudafeng[at]126.com)
 *
 * first created at : Tue Mar 17 2015 00:16:10 GMT+0800 (CST)
 *
 * ================================================================
 * Copyright 2013 xdf
 *
 * Licensed under the MIT License
 * You may not use this file except in compliance with the License.
 *
 * ================================================================ */

'use strict';

var co = require('co');
var fs = require('fs');
var path = require('path');
var EOL = require('os').EOL;
var chalk = require('chalk');
var update = require('npm-update');
var program = require('commander');
var driver = require('macaca-cli');
var spawn = require('child_process').spawn;

var pkg = require('../package');
var signal = require('../init/signal');
var request = require('../common/request');

program
  .option('-s, --signal <s>',   'send signal to process: stop, restart')
  .option('-v, --versions',     'output version infomation')
  .usage('<command> [options] [arguments]')
  .helpInformation = function() {
    return [
      '',
      '  ' + chalk.white(pkg.description),
      '',
      '  Usage:',
      '    ' + this._name + ' ' + this.usage(),
      '',
      '  Commands:',
      '    server            reliable slave server',
      '',
      '  Options:',
      '' + this.optionHelp().replace(/^/gm, '    '),
      '',
      '  Further help:',
      '',
      '  ' + chalk.white(pkg.homepage),
      '',
      ''
    ].join(EOL);
  };

program.parse(process.argv);

if (program.versions) {
  console.log(`${EOL} ${pkg.version}${EOL}`);
  process.exit(0);
}

if (program.signal) {
  driver.server.signal(program.signal);
  signal(program.signal);
  return;
}

var cmd = program.args[0];

if (!cmd) {
  return program.help();
}

var file = path.join(__dirname, `${pkg.name}-${cmd}`);

if (!fs.existsSync(file)) {
  console.log(`${EOL} command ${chalk.yellow(cmd)} not found`);
  return program.help();
}

var printInfo = function(lines) {
  var maxLength = 0;
  lines.forEach(line => {
    maxLength = line.length > maxLength ? line.length : maxLength;
  });

  var res = [new Array(maxLength + 7).join('*')];

  lines.forEach(line => {
    res.push(`*  ${line + new Array(maxLength - line.length + 1).join(' ')}  *`);
  });

  res.push(new Array(maxLength + 7).join('*'));
  console.log(chalk.white(`${EOL}${res.join(EOL)}${EOL}`));
};

function init(error, data) {

  if (data && data.version && pkg.version !== data.version) {
    printInfo([`version ${pkg.version} is outdate`, `run: npm i -g ${pkg.name}@${data.version}`]);
  }

  var args = program.rawArgs.slice(3);
  args.unshift(file);

  var bootstrap = spawn('node', args, {
    stdio: 'inherit'
  });

  bootstrap.on('close', function(code) {
    process.exit('process exited with code %s', code);
  });
};

co(update, {
  pkg: pkg,
  callback: init
});
